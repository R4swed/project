import { showSection, elements, statusLocales } from './utils.js';
import { api } from './api.js';

export const showTicketListOrForm = () => {
    showSection(elements.ticketList);
    loadTicketList();
};

export const initTickets = () => {
    const loadTicketList = async () => {
        const ticketsContainer = document.getElementById('ticketsContainer');
        if (!ticketsContainer) return;

        const user = JSON.parse(localStorage.getItem('user') || '{}');
        try {
            const tickets = await api.getTickets();
            
            if (tickets.length > 0) {
                ticketsContainer.innerHTML = tickets.map(ticket => `
                    <div class="ticket-item" data-ticket-id="${ticket.id}" data-subject="${ticket.subject}">
                        <p><strong>–¢–µ–º–∞:</strong> ${ticket.subject || '–ë–µ–∑ —Ç–µ–º—ã'}</p>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${ticket.status ? statusLocales[ticket.status] : '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</p>
                        <p><strong>–°–æ–∑–¥–∞–Ω:</strong> ${new Date(ticket.created_at).toLocaleString()}</p>
                    </div>
                `).join('');

                document.querySelectorAll('.ticket-item').forEach(item => {
                    item.addEventListener('click', () => {
                        showSection(elements.chatContainer);
                        document.querySelector('#chatContainer h2').innerHTML = 
                            `–ß–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ (${item.dataset.subject})<span id="ticketId" class="hidden">${item.dataset.ticketId}</span>`;
                        window.loadChatMessages(item.dataset.ticketId);
                    });
                });
            } else {
                ticketsContainer.innerHTML = '<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤</p>';
            }

            document.getElementById('ticketListUserEmail').textContent = user.email;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤:', error);
            ticketsContainer.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤</p>';
        }
    };

    window.loadTicketList = loadTicketList;

    const ticketForm = document.getElementById('ticketForm')?.querySelector('form');
    if (ticketForm) {
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        const emailInput = document.getElementById('email');
        const fileInput = document.getElementById('ticketFileInput');
        const attachBtn = document.getElementById('ticketAttachFileBtn');
        let selectedFile = null;

        if (user.email && emailInput) emailInput.value = user.email;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if (attachBtn && fileInput) {
            attachBtn.addEventListener('click', () => {
                fileInput.click();
            });

            fileInput.addEventListener('change', () => {
                const file = fileInput.files[0];
                if (!file) return;

                if (file.size > 10 * 1024 * 1024) {
                    alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10 –ú–ë');
                    fileInput.value = '';
                    selectedFile = null;
                    return;
                }

                selectedFile = file;
                attachBtn.textContent = `üìé ${file.name}`;
            });
        }

        ticketForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const ticketData = {
                company: document.getElementById('company')?.value || '',
                email: emailInput?.value || '',
                product: document.getElementById('product')?.value || '',
                subject: document.getElementById('subject')?.value || '',
                description: document.getElementById('description')?.value || ''
            };
        
            try {
                const response = await api.createTicket(ticketData);
                if (response.id) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (ticketData.description) {
                        await api.sendChatMessage(response.id, ticketData.description);
                    }

                    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    if (selectedFile) {
                        const formData = new FormData();
                        formData.append('file', selectedFile);
                        formData.append('ticket_id', response.id);

                        const token = localStorage.getItem('token');
                        await fetch('/api/chats/upload', {
                            method: 'POST',
                            headers: {
                                'Authorization': `Bearer ${token}`
                            },
                            body: formData
                        });
                    }
        
                    ticketForm.reset();
                    if (user.email) emailInput.value = user.email;
                    if (attachBtn) attachBtn.textContent = 'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª';
                    selectedFile = null;
                    showSection(elements.chatContainer);
                    document.querySelector('#chatContainer h2').innerHTML = 
                        `–ß–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ (${ticketData.subject})<span id="ticketId" class="hidden">${response.id}</span>`;
                    window.loadChatMessages(response.id);
                }
            } catch {
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç');
            }
        });
    }

    document.getElementById('newTicketBtn')?.addEventListener('click', () => {
        showSection(elements.ticketForm);
    });
};